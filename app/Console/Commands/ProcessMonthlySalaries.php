<?php

namespace App\Console\Commands;

use App\Models\SalaryPayment;
use App\Models\User;
use App\Models\Expense;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class ProcessMonthlySalaries extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'salary:process-monthly 
                            {--month= : The month to process (1-12). Defaults to current month}
                            {--year= : The year to process. Defaults to current year}
                            {--payment-date= : The payment date. Defaults to today}
                            {--dry-run : Run without making actual changes}';

    /**
     * The console command description.
     */
    protected $description = 'Process monthly salary payments for all eligible users';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $month = $this->option('month') ?? now()->month;
        $year = $this->option('year') ?? now()->year;
        $paymentDate = $this->option('payment-date') ?? now()->toDateString();
        $dryRun = $this->option('dry-run');

        // Validate inputs
        if ($month < 1 || $month > 12) {
            $this->error('Month must be between 1 and 12');
            return 1;
        }

        if ($year < 2020) {
            $this->error('Year must be 2020 or later');
            return 1;
        }

        $this->info("Processing salary payments for {$month}/{$year}");
        if ($dryRun) {
            $this->warn('DRY RUN MODE - No actual changes will be made');
        }

        // Get all users with active salary configuration
        $users = User::whereNotNull('salary_amount')
                    ->where('salary_is_active', true)
                    ->get();

        if ($users->isEmpty()) {
            $this->info('No users found with active salary configuration');
            return 0;
        }

        $this->info("Found {$users->count()} users with active salary configuration");

        $createdPayments = [];
        $skippedUsers = [];
        $errors = [];

        if (!$dryRun) {
            DB::beginTransaction();
        }

        try {
            foreach ($users as $user) {
                $this->line("Processing user: {$user->name} (ID: {$user->id})");

                // Check if payment already exists
                $existingPayment = SalaryPayment::where('user_id', $user->id)
                                              ->where('payment_month', $month)
                                              ->where('payment_year', $year)
                                              ->first();

                if ($existingPayment) {
                    $skippedUsers[] = [
                        'user' => $user->name,
                        'reason' => 'Payment already exists',
                        'existing_payment_id' => $existingPayment->id
                    ];
                    $this->warn("  → Skipped: Payment already exists (ID: {$existingPayment->id})");
                    continue;
                }

                if (!$dryRun) {
                    // Create salary payment
                    $salaryPayment = SalaryPayment::create([
                        'user_id' => $user->id,
                        'amount' => $user->salary_amount,
                        'currency' => $user->salary_currency ?? 'DZD',
                        'payment_month' => $month,
                        'payment_year' => $year,
                        'payment_date' => $paymentDate,
                        'status' => 'pending',
                        'payment_method' => 'bank_transfer',
                        'created_by' => 1, // System user
                        'notes' => 'Automatically generated by monthly salary processing'
                    ]);

                    // Create corresponding expense record
                    Expense::createFromSalaryPayment($salaryPayment);

                    $createdPayments[] = [
                        'user' => $user->name,
                        'amount' => $user->salary_amount,
                        'currency' => $user->salary_currency ?? 'DZD',
                        'payment_id' => $salaryPayment->id
                    ];

                    $this->info("  → Created payment: {$user->salary_amount} " . ($user->salary_currency ?? 'DZD') . " (ID: {$salaryPayment->id})");
                } else {
                    $createdPayments[] = [
                        'user' => $user->name,
                        'amount' => $user->salary_amount,
                        'currency' => $user->salary_currency ?? 'DZD',
                        'payment_id' => 'DRY_RUN'
                    ];

                    $this->info("  → Would create payment: {$user->salary_amount} " . ($user->salary_currency ?? 'DZD'));
                }
            }

            if (!$dryRun) {
                DB::commit();
            }

            // Summary
            $this->newLine();
            $this->info('=== PROCESSING SUMMARY ===');
            $this->info("Created payments: " . count($createdPayments));
            $this->info("Skipped users: " . count($skippedUsers));
            $this->info("Errors: " . count($errors));

            if (!empty($createdPayments)) {
                $this->newLine();
                $this->info('Created Payments:');
                $this->table(
                    ['User', 'Amount', 'Currency', 'Payment ID'],
                    array_map(function ($payment) {
                        return [
                            $payment['user'],
                            $payment['amount'],
                            $payment['currency'],
                            $payment['payment_id']
                        ];
                    }, $createdPayments)
                );
            }

            if (!empty($skippedUsers)) {
                $this->newLine();
                $this->warn('Skipped Users:');
                $this->table(
                    ['User', 'Reason', 'Existing Payment ID'],
                    array_map(function ($skip) {
                        return [
                            $skip['user'],
                            $skip['reason'],
                            isset($skip['existing_payment_id']) ? $skip['existing_payment_id'] : 'N/A'
                        ];
                    }, $skippedUsers)
                );
            }

            // Log the operation
            Log::info('Monthly salary processing completed', [
                'month' => $month,
                'year' => $year,
                'payment_date' => $paymentDate,
                'dry_run' => $dryRun,
                'created_count' => count($createdPayments),
                'skipped_count' => count($skippedUsers),
                'error_count' => count($errors)
            ]);

            return 0;

        } catch (\Exception $e) {
            if (!$dryRun) {
                DB::rollBack();
            }

            $this->error('Failed to process salary payments: ' . $e->getMessage());
            Log::error('Monthly salary processing failed', [
                'month' => $month,
                'year' => $year,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return 1;
        }
    }
}